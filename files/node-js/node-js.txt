https://youtu.be/eSaF8NXeNsA

Использование команд "node-js" в консоли начинается с префикса "npm". Пример:

	npm install -D webpack webpack-cli


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Консольные команды "node-js":

init

	Проинициализировать проект. После ввода будет предложено ввести информацию, которое будет добавлено в файл "package.json".
	
install <флаги> <приложения>

	Установить приложение или приложения с указанным флагом. Пример:
	
		npm install -D webpack webpack-cli
		
		Установить "webpack" и "webpack-cli" с флагом "D", который будет означать что данные зависимости будут установлены только для разработки "Development". При использовании данного флага
		в файле конфигураций "package.json" будет добавлено поле "devDependencies" с версиями устанавливаемых приложений.

&&

	Оператор объединения команд в консоли.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Флаги "node-js". Флаги пишутся через префикс дефис "-". Список флагов "node-js:

	D	-	При использовании данного флага	в файле конфигураций "package.json" будет добавлено поле "devDependencies" с версиями устанавливаемых приложений.

	S	-	

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Системные переменные в "node-js":

	"__dirname"	-	полное имя текущей директории.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Синтаксис "js" в "node-js".

module

	Это объект модулей в "node-js". Свойства/методы:

		exports	-	свойство, присвоенное значение которого будет экспортироваться. Обычно экспортируется объект:

			module.exports = {

				// содержимое объекта модуля.

			}

require('<модуль>')

	Импортирует указанный модуль. Список модулей:

		path

			Данный модуль позволяет работать с путями на платформе. У данного модуля будут следующие свойства/методы:

				resolve(<путь1>,<путь2>,<путьN>)

					Данный метод превращает последовательность путей или сегментов пути в абсолютный путь.
					Если не передается сегментов пути, path.resolve() возвращает абсолютный путь к текущей рабочей директории. Пример использования:

						const path = require('path');

						path.resolve('/root', '/parent', '/child');	// Результат = "/root/parent/child".

					Пример использования с системной переменной "__dirname":

						const path = require('path');

						path.resolve(__dirname, '/parent', '/child');

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Настройка "package.json". "package.json" - файл конфигураций всего проекта. Это объект в формате "json" (все свойства и значения будут писаться в формате "json").

Свойства объекта файла "package.json":

	scripts	-	свойство, значением которого является объект, свойства которых будут произвольные ключевые слова, которые затем можно использовать в консоли. Значения
	этих свойств (ключевых слов) будут команды в стороковом формате, которые можно ввести в консоль. Другими словами всемто того чтобы вводить длинные комады в консоль, можно
	добавить свойство в объект "scrips", и дать ему ту длинную консольную команду как значение. Пример:

		{
			"scripts": {
				"dev": "webpack --mode development",
				"build": "webpack --mode production",
				"watch": "watch --mode development --watch"
			}
		}

	В примере выше приводятся два свойства "dev", "build" и "watch", которые имеют соответствующие себе консольные команды в текстовом формате.
	Ввод в консоль "dev" будет означать то же самое, что и ввести "webpack --mode development". Если не указывать эти свойства, то метод сборки будет по умолчанию таким, как указан
	в свойстве "mode" файла "webpack.config.js", а если указывать, то будут форсированно использоваться те, что указаны в свойствах объекта "scrips".
	Пример использования указанных выше свойств в консоли:

		npm run dev

	main

		Поле, которое указывает на стартовый файл. При использовании "webpack", в этом свойстве не т необходимости, так как "webpack" сделает это сам. При использовании свойства "private", данное свойство не нужно.

	private

		Устанавливает, является ли проект приватным или нет (приватный пакет, который не нужно публиковать или нет). Значением является булево значение.
		

















































































