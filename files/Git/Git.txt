Ссылки:

	Переименование коммита:

		https://linuxize.com/post/change-git-commit-message/

	Руководство:

		https://git-scm.com/book/ru/v2

	Шпаргалки:

		https://zen.yandex.ru/media/nuancesprog/znakomstvo-s-git-i-github-rukovodstvo-dlia-nachinaiuscih-5ec2cba7a0033d1da2fb37db

		https://eax.me/git-commands/

		https://bookflow.ru/shpargalka-po-git/

		https://use-web.ru/news.php?id=138&tid=3

		https://proglib.io/p/git-cheatsheet/

		http://www.dtulyakov.ru/git.html

		https://habr.com/ru/post/522078/

		https://htmlacademy.ru/blog/boost/frontend/first-aid-git

Добавление директорий или файлов для исключания из добавления в систему версий. Для этого создается файл ".gitignore", и в нем перечисляются файлы или директории для игнорирования (каждый в новой строке).
Пример:

	node_modules
	dist

Команда:

	git checkout -b <имя ветки>

есть то же самое что и:

	git branch <имя ветки>
	git checkout <имя ветки>

что сразу создает ветку и переключается на нее.

Чтобы отменить незакоммиченные изменения:

	git clean -df			-	очищает изменения не внесенные в стейдж.
	git checkout -- .		-	очищает стейдж.

	git reflog	-	вывести историю коммитов.

	git reflog --all	-	вывести всю историю коммитов.


Если в репозитории имеется ветка с именем "gh-pages", то автоматически создается страница на "GitHub Pages", если в корне этой ветки имеется файл ".html" или ".md"
(если оба, то страница будет создана на основе файла ".html").
В гитхабе по умолчанию сделано так, что ветка "gh-pages" - эта та ветка, куда ведёт деплойная ссылка (хотя эту настройку репо можно менять и задавать другую ветку).
Поэтому все последние изменения надо мержить в "gh-pages".

**************

https://www.youtube.com/watch?v=_xJuTmu74G0

**************

• Флаги.

Если имя флага пишется полностью, то оно пишется через "--", а если коротко, то "-".

**************

ls

	показать список файлов в локальной директории.

git branch [<имя ветки>|<flag>]

	Работа с ветками. Если будет введена просто команда "git branch", то покажется список локальных веток, и указатель на текущую ветку.
	Если используется "<имя ветки>", то будет создана ветка, с именем который был указан на месте "<имя ветки>".
	Если был использован флаг, то будет произведена работа в соответствии с фалагом. Флаги:

		-a

			Показать список всех весток, включая удаленные ветки.

		-r

			Показать список удаленных веток.

		-d

			Удаление указанной ветки.

git add <file>

	добавить измененный/добавленный файл "<file>" в стейдж. Можно указать вместо "<file>" символ точки ("."),
	который выполнит добавление всех измененных/добавленных	файлов в стейдж.

git commit

	создать коммит на основе изменений в стейдж. При выполнении данной команды будет предложено добавить комментарий к коммиту.
	Использование с флагами:

		git commit -a			-	одновременно добавить с стейдж файлы, за которыми ведется слежка, и создать коммит.

		git commit -m <message>		-	создать коммит с сообщением коммита "<message>".

		git commit -am <message>	-	одновременно добавить с стейдж файлы, за которыми ведется слежка, и создать коммит
							с сообщением коммита "<message>".

		git commit --amend -m <message>	-	изменение последнего коммита и его сообщения.

		git commit --amend --no-edit	-	изменение последнего коммита, сохранив его сообщение.

git revert <hash>

	удаление коммита по его хешу. После этой команды откроется редактор "Vim".

git fetch origin <branch>

	подтянуть изменения из ветки "<branch>" (обновить "локальные знания" об удаленной ветке). Сама локальная ветка "<branch>" не обновляется.
	Данная команда для ознакомления с изменениями на удаленном репозитории. Позже можно применить их с помощью команды "git pull".
	Для этого нужно выполнить команду "pull". "origin" означает что ветка удаленного доступа.
	Чтобы подтянуть изменения из ветки и сразу их применить, нужно воспользоваться командой "git pull".

git merge [origin] <branch>

	выполнить слияние текущей ветки с веткой "<branch>" (забрать изменения от ветки "<branch>", и слить с текущей веткой).
	При указании опционального "[origin]", ветка "<branch>" будет браться из удаленного репозитория. При выполнении данной
	команды откроется окно редактора "Vim", в которой в первой строчке можно будет внести сообщение коммита.

git pull

	обновить текущую (локальную) ветку из области "локальные знания", или же сразу подтянуть и применить изменения из удаленного
	репозитория.

git rebase

	git rebase <branch>

		переписать историю текущей ветки, историей ветки "<branch>", по ходу решая потенциальные конфликты.
		Конфликты будут решаться редактированием указанным в сообщении "rebase" файлов, вручную через редактор "Vim",
		промежуточно добавляя изменения в стейдж ("git add .").
		После этого будут доступны команды:

			git rebase --continue	-	продолжить процесс (перейти к следующему (потенциальному) конфликту).

			git rebase --abort	-	прервать процесс "rebase".

			git rebase --skip	-	пропустить одни ход "rebase".

	git rebase -i HEAD~<n>

		изменить историю текущей ветки, на "<n>" число коммитов назад. После этой команды откроется интерктивное меню или редактор "Vim", с коммитами в количестве "<n>", и соответствующими командами для каждого коммита. За место "HEAD~<n>" можно указать хеш коммита, до котого нужно изменить историю коммитов.
		Чтобы редактировать содержимое сообщения, нужно нажать кнопку "Insert", затем отредактировать команды в соответствии с руководством, указанное в сообщении. Для удаления коммита, заменяем слово "pick" перед коммитом на "drop". Нажимем "ESC", затем вводим в консоль ":w" (сохранить), затем ":q" (выйти из редактора "Vim").
		После выбора нужного действия над коммитом (командой), и после выхода из редактора "Vim", нужно ввести команду:

			git rebase -i --continue

		Для успешного применения изменений на удаленном репозитории, нужно выполнить:

			git push --force [origin] [<branch>]

		Пример удаления 1 коммита:

			Ввести в консоль:

				git rebase -i HEAD~1

		• Примечание: не удастся вместо числа "<n>" указать число всех существуюших коммитов, а только число коммитов, без корневого (начального) коммита. Чтобы изменить корневой (начальный) коммит, нужно ввести команду:

			git rebase -i --root

git reset

	git reset --hard origin[/master]

		принудительный сброс всех локальных изменений, и установка локального репозитория в состояние удаленного репозитория.
	

	git reset --hard HEAD~<n>

		изменить метоположение указателя ("HEAD") на "<n>" коммитов назад, и изменить (сбросить) изменения всех локальных файлов.
		Для успешного применения изменений на удаленном репозитории, нужно выполнить:

			git push --force [origin] [<branch>]

	git reset --soft HEAD~<n>

		изменить метоположение указателя ("HEAD") на "<n>" коммитов назад, но изменения всех локальных файлов останутся.
		Для успешного применения изменений на удаленном репозитории, нужно выполнить:

			git push --force [origin] [<branch>]

git push [origin] [<branch>]

	отправка изменений на удаленный репозиторий в текущую ветку. При необходимости можно добавить опциональный "<branch>", чтобы указать какую ветку
	требуется запушить. Если требуется, то можно указать опциональный параметр "origin", который будет указывать что ветка в удаленном репозитории.
	Для данной команды будут доступны флаги:

		--force		-	принудительное выполнение. В данном случае полное удаление и замена истории/содердимого исходной ветки текущей веткой.

git cherry-pick <hash>

	добавить в текущую ветку коммит из другой ветки по его хешу "<hash>".

git touch <file>

	создать файл "<file>" в текущей директории.

cat <file>

	просчитать содержимое файла "<file>" в текущей директории.

vim <file>

	открыть редактор "Vim" для файла "<file>". После этого нажать клавищу "i" на клавиатуре, чтобы перейти в режим редактирования содержимого.
	Чтобы получить доступ к интерфейсу "Vim" (напр. выход из него), нужно нажать клавищу "Esc" на клавиатуре, затем ввести соответствующую команду
	управления через двоеточие (":").
	Команды управления:

		:q	-	простой выход из редактора "Vim" (если не было внесено изменений в файл).

		:q!	-	принудительный выход из редактора "Vim" без сохранения изменений в файл.

