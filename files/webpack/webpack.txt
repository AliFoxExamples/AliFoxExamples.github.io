npm install -D webpack webpack-cli

	"webpack"		-	корневой функционал "webpack".
	
	"webpack-cli"	-	функционал команд, которые будут доступны в консоли.
	
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

При использовании сборщика "webpack", выходной файл скрипта автоматически будет собран так, что в нем будут соблюдены все зависимости. Для этого в разных скриптовых файлах нужно
воспользоваться импортированием/экспортированием. Больше не нужно будет следить за порядком очереди тегов "script" в "HTML", так как сборщик соберет единый выходной скриптовой файл
соблюдая все зависимости всех связанных между собой скриптовых файлов.

◘ Использование фукнционала "webpack". Есть два способа работы с "webpack", через консольные команды "webpack", и через настройку файла конфигурации "webpack", который называется
"webpack.config.js".	

• Консольные команды "webpack".	Использование команд "webpack" в консоли начинается с префикса "webpack". Пример:

	webpack	-	построить билд на основе текущих конфигураций.

• Настройка файла конфигурации "webpack.config.js". По умолчанию "webpack" сразу ищет наличие данного файла, и настраивает конфигурции согласно его содержимому.
Сам "webpack.config.js" является инструментом сборки, и не будет относиться к самому проекту.
Можно менять название "webpack.config.js" на произвольное //ДОПОЛНИТЬ

Настройка файла конфигурации "webpack.config.js" это значит прописывание свойств объекту "exports" ("module.exports"):

	// файл "webpack.config.js"webpack.config.js".

	module.exports {
		// свойства.
	}

Свойства объекта "exports":

	mode

		Указывает сборщику "webpack", в каком режиме делать билд. Значение пишется в строковом виде. Значения:

			production	-	делать билд в режиме "production" (по умолчанию). Собранный код в данном режиме минифицируется.

			development	-	делать билд в режиме разработчика. Собранный код в данном режиме не минифицирован.

		Пример:

			module.exports {
				mode: 'development',
			}

	entry

		Значением данного свойства будет путь входного файла или файлов. Формат пути может быть в строковом формате (если файл имеется только один), и так же объект, с путями.
		Если будет использоваться объект с путями, то имена свойств будут произвольными (для главного пути рекомендуется испорльзовать имя "main"), а значениями этих свойст будут
		пути этих файлов в строковом формате. Другими словами свойство "entry" указывает сборщику ("webpack") откуда начать. Пример:

			module.exports {
				entry: './src/index.js',
			}

		Пример с использованием нескольких входных путей:

			module.exports {
				entry: {
					main: './src/index.js',
					analitics: './src/analitics.js',
				}
			}

	output

		Значением данного свойства будет объект со свойствами результата сборки. Свойства объекта "output":

			filename

				Значением данного свойства будет имя собраного "js" файла в строковом формате, другими словами указывает сборщику ("webpack") как назвать выходной файл скриптов.
				Обычно этот файл принято называть "bundle.js". Файлов будет столько, сколько указано входных файлов в свойстве "entry" объекта "exports".
				• Примечание. В именах/адресах могут использоваться паттерны. Подробнее в главе "Паттерны имен".

			path

				Значением данного свойства будет путь выходных файлов в строковом формате, другими словами указывает сборщику ("webpack") куда ложить сборку. Значение можно указывать
				просто в строковом формате, но рекомендуется использовать встроенный модуль в "node.js", который называется "path" (пример приведен ниже). Подробнее о модуле "path" в
				руководстве "node-js". Обычно имя выходной директории принято называть "dist".

		Пример:

				const path = require('path');

				module.exports {
					entry: './src/index.js',
					output: {
						filename: 'bundle.js',
						path: path.resolve(__dirname, 'dist'),	//	подробнее в руководстве "node-js".
					},
				}

		• Примечание. В именах/адресах могут использоваться паттерны. Подробнее в главе "Паттерны имен".

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Паттерны имен. 

https://youtu.be/eSaF8NXeNsA?t=2014
https://youtu.be/eSaF8NXeNsA?t=2338
https://webpack.js.org/configuration/output/































































