https://youtu.be/eSaF8NXeNsA

Использование команд "NodeJS" в консоли начинается с префикса "npm". Пример:

	npm install -D webpack webpack-cli


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Консольные команды "NodeJS":

npm

	Контроль над командами пакетного менеджера. Команды доступные после "npm":

		init

			Проинициализировать проект. После ввода будет предложено ввести информацию, которое будет добавлено в файл "package.json".
			
		install <флаги> <приложения>

			Установить приложение или приложения с указанным флагом. Пример:
			
				npm install -D webpack webpack-cli
				
				Установить "webpack" и "webpack-cli" с флагом "D", который будет означать что данные зависимости будут установлены только для разработки "Development". При использовании данного флага
				в файле конфигураций "package.json" будет добавлено поле "devDependencies" с версиями устанавливаемых приложений.

		&&

			Оператор объединения команд в консоли. Данный оператор нужен например при использовании в скрипте ("package.json") для установки режима cборки через "set NODE_ENV=<режим cборки>",
			и когда в скрипте после данной команды идут другие команды, они перечисляются после оператора "&&".
			• Примечание: При использовании команды "set NODE_ENV=<режим cборки>", если после этой команды идет пробел (при использовании нескольких комманд, до оператора "&&"),
			то этот пробел добавится к значению "NODE_ENV".
			Например в скрипте
			
				"dev": "set NODE_ENV=development && webpack",
			
			значение "NODE_ENV" в итоге будет равно "development " (с пробелом). Для использовании данного значения режима cборки, на строке нужно вызвать метод "trim()".
		
		run
		
			Запуск произвольных скриптов из файла конфигурации проекта "package.json". Запускаются эти скрипты указанием иммени этого скрипта после ключевого слова "run".

npx

	Контроль над командами установленных пакетов. Примеры для пакет:
		
		npx tsc <команда>
		
			Команды для "TypeScript", где на месте "<команда>" будет команда пакета. Например:
			
				npx tsc --init
				
					Проинициализировать конфигурационный файл "TypeScript".
		
		npx webpack <команда>
		
			Команды для "Webpack", где на месте "<команда>" будет команда пакета. Например:
			
				npx webpack --init
				
					Проинициализировать конфигурационный файл "Webpack".
			
		npx eslint <команда>
		
			Команды для "Webpack", где на месте "<команда>" будет команда пакета. Например:
			
				npx eslint --init
				
					Проинициализировать конфигурационный файл "ESLint".
	
	Если команды инициализируются в скриптах файла конфигурации сборки "package.json", то префикс "npx" не нужен.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Флаги "NodeJS". Флаги пишутся через префикс дефис "-". Список флагов "NodeJS":

	D
	
		При использовании данного флага при установке пакетов, пакеты будут установлены как зависимости для разработки и в файле конфигураций "package.json" будет добавлено поле
		"devDependencies" с версией установленного пакета.

	S
	
		//

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Системные переменные в "NodeJS":

	"__dirname"	-	полное имя текущей директории.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Синтаксис "JavaScript" в "NodeJS".

module

	Это объект модулей в "NodeJS". Свойства/методы:

		exports	-	свойство, присвоенное значение которого будет экспортироваться. Обычно экспортируется объект:

			module.exports = {

				// содержимое объекта модуля.

			}

require('<модуль>')

	Импортирует указанный модуль. Список модулей:

		path

			Данный модуль позволяет работать с путями на платформе. У данного модуля будут следующие свойства/методы:

				resolve(<путь1>,<путь2>,<путьN>)

					Данный метод превращает последовательность путей или сегментов пути в абсолютный путь.
					Если не передается сегментов пути, path.resolve() возвращает абсолютный путь к текущей рабочей директории. Пример использования:

						const path = require('path');

						path.resolve('/root', '/parent', '/child');	// Результат = "/root/parent/child".

					Пример использования с системной переменной "__dirname":

						const path = require('path');

						path.resolve(__dirname, '/parent', '/child');

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ Настройка "package.json". "package.json" - файл конфигураций всего проекта. Это объект в формате "json" (все свойства и значения будут писаться в формате "json").

Свойства объекта файла "package.json":

	scripts
	
		Свойство, значением которого является объект, свойства которых будут произвольные ключевые слова, которые затем можно использовать в консоли. Значения
		этих свойств (ключевых слов) будут команды в стороковом формате, которые можно ввести в консоль (через "npx").
		Другими словами вместо того чтобы вводить длинные комады в консоль,	можно добавить произвольное свойство в объект "scrips", и перечислить в нем команды как значение.
		Пример:

			{
				"scripts": {
					"dev": "webpack --mode development",
					"build": "webpack --mode production",
					"watch": "webpack --mode development --watch"
				}
			}

		В примере выше приводятся два свойства "dev", "build" и "watch", которые имеют соответствующие себе консольные команды в текстовом формате.
		
		Далее эти скрипты запускаются в консоли через "npm run", и далее указывается имя скрипта.
		Ввод в консоль "npm run dev" будет означать то же самое, что и ввести "npx webpack --mode development".
		
		В одном скрипте можно использовать несколько команд, которые можно объеденить оператором "&&", подробнее в главе `Консольные команды "NodeJS"`.
		
		• Примечание: При использовании команды "set NODE_ENV=<режим cборки>", если после этой команды идет пробел (при использовании нескольких комманд, до оператора "&&"),
		то этот пробел добавится к значению "NODE_ENV".
		Напримерв скрипте
			
			"dev": "set NODE_ENV=development && webpack",
			
		значение "NODE_ENV" в итоге будет равно "development " (с пробелом). Для использовании данного значения режима cборки, на строке нужно вызвать метод "trim()".

	main

		Поле, которое указывает на стартовый файл. При использовании "webpack", в этом свойстве нет необходимости, так как "webpack" сделает это сам. При использовании свойства "private", данное свойство не нужно.

	private

		Устанавливает, является ли проект приватным или нет (приватный пакет, который не нужно публиковать или нет). Значением является булево значение.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

◘ (Разобрать).

В Nodejs есть одно правило, при работе с асинхронными операциями, всегда в колбек первым параметром передавать ошибку.

File system:

	const fs = require('fs');

		fs.mkdir();	-	создать новую папку.

			fs.mkdirSync();	-	создать новую папку (синхронно).

		fs.writeFile();	-	создать новый файл.

			fs.writeFileSync();	-	создать новый файл (синхронно).

		fs.appendFile();	-	добавить контент в файл.

		fs.readFile();	-	читать файл.

Operating system:

	const os = require('os');

Event emitter:

	const EventEmitter = require('os');

	const emitter = new EventEmitter();

HTTP:

	https://youtu.be/3aGSqasVPsI?t=2374

	const http = require('http');

	const server = http.createServer((req, res) => {

		// Добавить хэдеры:
		res.writeHead(<status code>, {<headers>});		

		// Завершить ответ сервера:
		res.end(<body>);

		// Адрес запроса:

		req.url;

	});

	server.listen(<port>, callback);

Port:
https://youtu.be/3aGSqasVPsI?t=3577

Nodemon:
https://youtu.be/3aGSqasVPsI?t=2585

Colors:
https://youtu.be/9EtkpCzqZu0?t=1762

ejs:
https://youtu.be/9EtkpCzqZu0?t=1926

		



		

















































































